"main";let Hapi;_e11‍.w('hapi',[["default",function(v){Hapi=v}]]);let Transaction;_e11‍.w('./DOM/transaction',[["default",function(v){Transaction=v}]]);let db;_e11‍.w('./db',[["default",function(v){db=v}]]);let Boom;_e11‍.w('boom',[["default",function(v){Boom=v}]]);let GUID;_e11‍.w('node-uuid',[["default",function(v){GUID=v}]]);





const routes = [
    {
        path: '/transaction/{id}',
        method: 'GET',
        config: {
            response: {
                emptyStatusCode: 204
            },
            handler: (request, reply) => {
                if (!request.params.id.match(/^[0-9a-fA-F]{24}$/)) {
                    reply(Boom.badRequest(request.params.id + ' it\'s not a valide id'));
                    return;
                };
                Transaction.findById(request.params.id, (err, transaction) => {
                    if (err) {
                        reply(Boom.badImplementation('There was a problem finding the transaction: ' + err));
                        return;
                    };
                    if (!transaction && !err) {
                        reply(Boom.notFound('No transaction found'));
                        return;
                    };
                    reply(transaction);
                }
                ).catch((err) => {
                    reply('server-side error');
                });
            }
        }
    },
    {
        path: '/transaction',
        method: 'POST',
        config: {
            response: {
                emptyStatusCode: 204
            },
            handler: (request, reply) => {
                const guid = GUID.v4();
                const trans = new Transaction ({
                    transactionId: guid,
                    amount: {
                        value: request.payload.amount.value,
                        device: request.payload.amount.device
                    },
                    meansPayment: request.payload.meansPayment,
                    description: request.payload.description,
                    type: request.payload.type,
                    categoryId: request.payload.categoryId,
                    creationDate: Date.now(),
                    updateDate: Date.now()
                });
                trans.save((err, trans) => {
                    if (err) Boom.badImplementation("There was a problem adding the information to the database.");
                    reply();
                    return;
                });
            }
        }
    }
];

_e11‍.d(routes);